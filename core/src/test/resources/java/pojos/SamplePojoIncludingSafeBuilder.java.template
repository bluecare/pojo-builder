package io.github.muehmar;

import java.util.Objects;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;

public interface CustomerExtension {

  Integer getId();

  String getUsername();

  Optional<String> getNickname();

  default Customer withId(Integer id) {
    return new Customer(id, getUsername(), getNickname().orElse(null));
  }

  default Customer withUsername(String username) {
    return new Customer(getId(), username, getNickname().orElse(null));
  }

  default Customer withNickname(String nickname) {
    return new Customer(getId(), getUsername(), nickname);
  }

  default Customer withNickname(Optional<String> nickname) {
    return new Customer(getId(), getUsername(), nickname.orElse(null));
  }

  default <T> T map(Function<Customer, T> f) {
    final Customer self =
      new Customer(getId(), getUsername(), getNickname().orElse(null));
    return f.apply(self);
  }

  default Customer mapIf(boolean shouldMap, UnaryOperator<Customer> f) {
    final Customer self =
      new Customer(getId(), getUsername(), getNickname().orElse(null));
    return shouldMap ? f.apply(self) : self;
  }

  default <T> Customer mapIfPresent(Optional<T> value, BiFunction<Customer, T, Customer> f) {
    final Customer self =
      new Customer(getId(), getUsername(), getNickname().orElse(null));
    return value.map(v -> f.apply(self, v)).orElse(self);
  }

  public static Builder0 newBuilder() {
    return new Builder0(new Builder());
  }

  public static final class Builder {
    private Builder() {
    }

    private Integer id;
    private String username;
    private String nickname;

    private Builder setId(Integer id) {
      this.id = id;
      return this;
    }

    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    public Builder setNickname(Optional<String> nickname) {
      this.nickname = nickname.orElse(null);
      return this;
    }

    public Customer build() {
      return new Customer(id, username, nickname);
    }
  }

  public static final class Builder0 {
    private final Builder builder;

    private Builder0(Builder builder) {
      this.builder = builder;
    }

    public Builder1 setId(Integer id) {
      return new Builder1(builder.setId(id));
    }
  }

  public static final class Builder1 {
    private final Builder builder;

    private Builder1(Builder builder) {
      this.builder = builder;
    }

    public Builder2 setUsername(String username) {
      return new Builder2(builder.setUsername(username));
    }
  }

  public static final class Builder2 {
    private final Builder builder;

    private Builder2(Builder builder) {
      this.builder = builder;
    }

    public OptBuilder0 andAllOptionals() {
      return new OptBuilder0(builder);
    }

    public Builder andOptionals() {
      return builder;
    }

    public Customer build() {
      return builder.build();
    }
  }

  public static final class OptBuilder0 {
    private final Builder builder;

    private OptBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptBuilder1 setNickname(String nickname) {
      return new OptBuilder1(builder.setNickname(nickname));
    }

    public OptBuilder1 setNickname(Optional<String> nickname) {
      return new OptBuilder1(nickname.map(builder::setNickname).orElse(builder));
    }
  }

  public static final class OptBuilder1 {
    private final Builder builder;

    private OptBuilder1(Builder builder) {
      this.builder = builder;
    }

    public Customer build() {
      return builder.build();
    }
  }

  default boolean genEquals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final Customer other = (Customer) obj;
    return Objects.equals(getId(), other.getId())
        && Objects.equals(getUsername(), other.getUsername())
        && Objects.equals(getNickname(), other.getNickname());
  }

  default int genHashCode() {
    int result = Objects.hash(getId(), getUsername(), getNickname());
    return result;
  }

  default String genToString() {
    return "Customer{"
        + "id=" + getId()
        + ", username='" + getUsername() + '\''
        + ", nickname=" + getNickname()
        + '}';
  }
}