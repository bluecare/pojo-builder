package io.github.muehmar;

import java.util.Objects;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;

public interface CustomerExtension {

  Integer getId();

  String getUsername();

  Optional<String> getNickname();

  Customer withId(Integer id) {
    return new Customer(id, getUsername(), getNickname().orElse(null));
  }

  Customer withUsername(String username) {
    return new Customer(getId(), username, getNickname().orElse(null));
  }

  Customer withNickname(String nickname) {
    return new Customer(getId(), getUsername(), nickname);
  }

  public Customer withNickname(Optional<String> nickname) {
    return withNickname(self(), nickname);
  }

  public static Customer withNickname(Customer self, Optional<String> nickname) {
    return new Customer(getId(), getUsername(), nickname.orElse(null));
  }

  public <T> T map(Function<Customer, T> f) {
    return f.apply(self());
  }

  public Customer mapIf(boolean shouldMap, UnaryOperator<Customer> f) {
    return shouldMap ? f.apply(self()) : self();
  }

  public <T> Customer mapIfPresent(Optional<T> value, BiFunction<Customer, T, Customer> f) {
    return value.map(v -> f.apply(self(), v)).orElseGet(this::self);
  }



  @Override
  public boolean equals(Object obj) {
    return equals(self(), obj);
  }

  private static boolean equals(Customer o1, Object obj) {
    if (o1 == obj) return true;
    if (obj == null || o1.getClass() != obj.getClass()) return false;
    final Customer o2 = (Customer) obj;
    return Objects.equals(o1.getId(), o2.getId())
        && Objects.equals(o1.getUsername(), o2.getUsername())
        && Objects.equals(o1.getNickname(), o2.getNickname());
  }

  @Override
  public int hashCode() {
    return hashCode(self());
  }

  private static int hashCode(Customer o) {
    int result = Objects.hash(o.getId(), o.getUsername(), o.getNickname());
    return result;
  }

  @Override
  public String toString() {
    return toString(self());
  }

  private static String toString(Customer self) {
    return "Customer{"
        + "id=" + self.getId()
        + ", username='" + self.getUsername() + '\''
        + ", nickname=" + self.getNickname()
        + '}';
  }
}