package io.github.muehmar;

import java.util.Objects;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;

public interface CustomerExtension {

  Integer getId();

  String getUsername();

  Optional<String> getNickname();

  Customer withId(Integer id) {
    return new Customer(id, getUsername(), getNickname().orElse(null));
  }

  Customer withUsername(String username) {
    return new Customer(getId(), username, getNickname().orElse(null));
  }

  Customer withNickname(String nickname) {
    return new Customer(getId(), getUsername(), nickname);
  }

  Customer withNickname(Optional<String> nickname) {
    return new Customer(getId(), getUsername(), nickname.orElse(null));
  }

  <T> T map(Function<Customer, T> f) {
    final Customer self =
      new Customer(getId(), getUsername(), getNickname().orElse(null));
    return f.apply(self);
  }

  Customer mapIf(boolean shouldMap, UnaryOperator<Customer> f) {
    final Customer self =
      new Customer(getId(), getUsername(), getNickname().orElse(null));
    return shouldMap ? f.apply(self) : self;
  }

  <T> Customer mapIfPresent(Optional<T> value, BiFunction<Customer, T, Customer> f) {
    final Customer self =
      new Customer(getId(), getUsername(), getNickname().orElse(null));
    return value.map(v -> f.apply(self, v)).orElse(self);
  }



  boolean genEquals(Object obj) {
    if (this == obj) return true;
    if (obj == null || this.getClass() != obj.getClass()) return false;
    final Customer other = (Customer) obj;
    return Objects.equals(getId(), other.getId())
        && Objects.equals(getUsername(), other.getUsername())
        && Objects.equals(getNickname(), other.getNickname());
  }

  @Override
  public int hashCode() {
    return hashCode(self());
  }

  private static int hashCode(Customer o) {
    int result = Objects.hash(o.getId(), o.getUsername(), o.getNickname());
    return result;
  }

  @Override
  public String toString() {
    return toString(self());
  }

  private static String toString(Customer self) {
    return "Customer{"
        + "id=" + self.getId()
        + ", username='" + self.getUsername() + '\''
        + ", nickname=" + self.getNickname()
        + '}';
  }
}