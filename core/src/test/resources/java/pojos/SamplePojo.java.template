package io.github.muehmar;

import java.util.Objects;
import java.util.Optional;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.UnaryOperator;

public abstract class CustomerExtension {
  protected CustomerExtension() {
    final Object o = this;
    if(!(o instanceof Customer))
      throw new IllegalArgumentException("Only class Customer can extend CustomerExtension.");
  }

  private Customer self() {
    final Object self = this;
    return (Customer)self;
  }

  public Customer withId(Integer id) {
    return withId(self(), id);
  }

  public Customer withUsername(String username) {
    return withUsername(self(), username);
  }

  public Customer withNickname(String nickname) {
    return withNickname(self(), nickname);
  }

  private static Customer withId(Customer self, Integer id) {
    return new Customer(id, self.getUsername(), self.getNickname().orElse(null));
  }

  private static Customer withUsername(Customer self, String username) {
    return new Customer(self.getId(), username, self.getNickname().orElse(null));
  }

  private static Customer withNickname(Customer self, String nickname) {
    return new Customer(self.getId(), self.getUsername(), nickname);
  }

  public Customer withNickname(Optional<String> nickname) {
    return withNickname(self(), nickname);
  }

  public static Customer withNickname(Customer self, Optional<String> nickname) {
    return new Customer(self.getId(), self.getUsername(), nickname.orElse(null));
  }

  public <T> T map(Function<Customer, T> f) {
    return f.apply(self());
  }

  public Customer mapIf(boolean shouldMap, UnaryOperator<Customer> f) {
    return shouldMap ? f.apply(self()) : self();
  }

  public <T> Customer mapIfPresent(Optional<T> value, BiFunction<Customer, T, Customer> f) {
    return value.map(v -> f.apply(self(), v)).orElseGet(this::self);
  }

  public static final class Builder {
    private Builder() {
    }

    private Integer id;
    private String username;
    private String nickname;

    private Builder setId(Integer id) {
      this.id = id;
      return this;
    }

    private Builder setUsername(String username) {
      this.username = username;
      return this;
    }

    public Builder setNickname(String nickname) {
      this.nickname = nickname;
      return this;
    }

    public Builder setNickname(Optional<String> nickname) {
      this.nickname = nickname.orElse(null);
      return this;
    }

    public Customer build() {
      return new Customer(id, username, nickname);
    }
  }

  public static Builder0 newBuilder() {
    return new Builder0(new Builder());
  }

  public static final class Builder0 {
    private final Builder builder;

    private Builder0(Builder builder) {
      this.builder = builder;
    }

    public Builder1 setId(Integer id) {
      return new Builder1(builder.setId(id));
    }
  }

  public static final class Builder1 {
    private final Builder builder;

    private Builder1(Builder builder) {
      this.builder = builder;
    }

    public Builder2 setUsername(String username) {
      return new Builder2(builder.setUsername(username));
    }
  }

  public static final class Builder2 {
    private final Builder builder;

    private Builder2(Builder builder) {
      this.builder = builder;
    }

    public OptBuilder0 andAllOptionals() {
      return new OptBuilder0(builder);
    }

    public Builder andOptionals() {
      return builder;
    }

    public Customer build() {
      return builder.build();
    }
  }

  public static final class OptBuilder0 {
    private final Builder builder;

    private OptBuilder0(Builder builder) {
      this.builder = builder;
    }

    public OptBuilder1 setNickname(String nickname) {
      return new OptBuilder1(builder.setNickname(nickname));
    }

    public OptBuilder1 setNickname(Optional<String> nickname) {
      return new OptBuilder1(nickname.map(builder::setNickname).orElse(builder));
    }
  }

  public static final class OptBuilder1 {
    private final Builder builder;

    private OptBuilder1(Builder builder) {
      this.builder = builder;
    }

    public Customer build() {
      return builder.build();
    }
  }

  @Override
  public boolean equals(Object obj) {
    return equals(self(), obj);
  }

  private static boolean equals(Customer o1, Object obj) {
    if (o1 == obj) return true;
    if (obj == null || o1.getClass() != obj.getClass()) return false;
    final Customer o2 = (Customer) obj;
    return Objects.equals(o1.getId(), o2.getId())
        && Objects.equals(o1.getUsername(), o2.getUsername())
        && Objects.equals(o1.getNickname(), o2.getNickname());
  }

  @Override
  public int hashCode() {
    return hashCode(self());
  }

  private static int hashCode(Customer o) {
    int result = Objects.hash(o.getId(), o.getUsername(), o.getNickname());
    return result;
  }

  @Override
  public String toString() {
    return toString(self());
  }

  private static String toString(Customer self) {
    return "Customer{"
        + "id=" + self.getId()
        + ", username='" + self.getUsername() + '\''
        + ", nickname=" + self.getNickname()
        + '}';
  }
}